Longest Increasing Subsequence II

class Solution {
public:
    int lengthOfLIS(vector<int>& nums, int k) {
        int n = nums.size();
        if (n == 0) return 0;

        vector<int> dp(n, 1); // Each element can be a subsequence of length 1

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                // Check if we can extend the subsequence
                if (nums[j] < nums[i] && (nums[i] - nums[j] <= k)) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }

        // The result is the maximum value in dp
        return *max_element(dp.begin(), dp.end());
    }
};